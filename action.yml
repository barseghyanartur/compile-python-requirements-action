name: 'Compile and PR Python Requirements'
description: 'Compiles Python requirements files and creates a PR if there are changes'
inputs:
  input-file:
    description: 'Input file (requirements.in)'
    required: true
  os-name:
    description: 'Operating system name (platform slug)'
    required: true
  github-token:
    description: 'GitHub Token for creating pull requests and committing'
    required: false
    default: ''
  output-directory:
    description: 'Directory to place the compiled requirements'
    required: false
    default: 'requirements/'
  target-branch:
    description: 'Target branch'
    required: false
    default: 'main'
  prefix:
    description: 'Prefix for the output file'
    required: false
    default: ''
  create-artifact:
    description: 'Flag to determine if an artifact should be created'
    required: false
    default: 'false'
  debug:
    description: 'Flag to determine if debug mode'
    required: false
    default: 'false'

outputs:
  artifact_created:
    description: "Whether an artifact was created"
    value: ''

runs:
  using: 'composite'
  steps:
    - name: Install pip-tools
      id: install_pip_tools
      run: python -m pip install pip-tools
      shell: bash

    - name: Create Output Directory
      id: create_output_dir
      run: mkdir -p ${{ inputs.output-directory }}
      shell: bash

    - name: Compile requirements
      id: compile_requirements
      run: pip-compile --output-file ${{ inputs.output-directory }}/${{ inputs.prefix }}${{ inputs.os-name }}.txt ${{ inputs.input-file }}
      shell: bash

    - name: Append datetime to requirements
      id: append_datetime_to_compiled_requirements
      if: ${{ inputs.debug == 'true' }}
      run: |
        echo "# Compiled: $(date -u)" >> ${{ inputs.output-directory }}/${{ inputs.prefix }}${{ inputs.os-name }}.txt
        cat ${{ inputs.output-directory }}/${{ inputs.prefix }}${{ inputs.os-name }}.txt
      shell: bash

    - name: Set up Git
      id: setup_git
      shell: bash
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

    - name: Check for changes
      id: check_for_changes
      run: |
        # Stage all changes including new files
        git add -A
    
        # Check for changes in tracked files
        DIFF_TRACKED=$(git diff --staged)
    
        # Check for untracked files
        UNTRACKED_FILES=$(git ls-files --others --exclude-standard)
    
        # Determine if there are any changes or untracked files
        if [[ -n "$DIFF_TRACKED" || -n "$UNTRACKED_FILES" ]]; then
          echo "Changes detected."
          echo "changes=true" >> $GITHUB_OUTPUT
        else
          echo "No changes detected."
          echo "changes=false" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Test check for changes
      id: test_check_for_changes
      if: ${{ steps.check_for_changes.outputs.changes == 'true' }}
      run: echo "Changes detected!"
      shell: bash

    - name: Commit changes
      id: commit_changes
      if: ${{ steps.check_for_changes.outputs.changes == 'true' }}
      run: |
        git checkout -b reqs/auto-update-requirements-${{ inputs.os-name }}-${{ github.run_id }}
        git add -A
        git commit -m "Auto-update requirements"
        git push origin reqs/auto-update-requirements-${{ inputs.os-name }}-${{ github.run_id }}
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}

    - name: Create Pull Request
      id: create_pull_request
      if: ${{ steps.check_for_changes.outputs.changes == 'true' }}
      run: |
        PR_TITLE="Auto-update requirements ${{ inputs.os-name }}-${{ github.run_id }}"
        PR_BODY="Automatically updated requirements ${{ inputs.os-name }}-${{ github.run_id }}"
        BASE_BRANCH="${{ inputs.target-branch }}"  # Use the target branch as the base
        HEAD_BRANCH="reqs/auto-update-requirements-${{ inputs.os-name }}-${{ github.run_id }}"
        curl -sS -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/pulls \
          -d "{\"title\":\"$PR_TITLE\", \"body\":\"$PR_BODY\", \"base\":\"$BASE_BRANCH\", \"head\":\"$HEAD_BRANCH\"}"
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}

    - name: Prepare Artifact
      id: prepare_artifact
      if: ${{ inputs.create-artifact == 'true' }} && ${{ steps.check_for_changes.outputs.changes == 'true' }}
      run: |
        mkdir -p ${{ inputs.output-directory }}/artifacts
        cp ${{ inputs.output-directory }}/${{ inputs.prefix }}${{ inputs.os-name }}.txt ${{ inputs.output-directory }}/artifacts/
        tar -czvf ${{ inputs.output-directory }}/requirements.tar.gz -C ${{ inputs.output-directory }}/artifacts .
        echo "artifact_created=true" >> $GITHUB_OUTPUT
      shell: bash
